// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/object/object.service.go

// Package mock_object is a generated GoMock package.
package mock_object

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/isd-sgcu/rpkm67-go-proto/rpkm67/store/object/v1"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// DeleteByKey mocks base method.
func (m *MockService) DeleteByKey(arg0 context.Context, arg1 *v1.DeleteByKeyObjectRequest) (*v1.DeleteByKeyObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByKey", arg0, arg1)
	ret0, _ := ret[0].(*v1.DeleteByKeyObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByKey indicates an expected call of DeleteByKey.
func (mr *MockServiceMockRecorder) DeleteByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByKey", reflect.TypeOf((*MockService)(nil).DeleteByKey), arg0, arg1)
}

// FindByKey mocks base method.
func (m *MockService) FindByKey(arg0 context.Context, arg1 *v1.FindByKeyObjectRequest) (*v1.FindByKeyObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByKey", arg0, arg1)
	ret0, _ := ret[0].(*v1.FindByKeyObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByKey indicates an expected call of FindByKey.
func (mr *MockServiceMockRecorder) FindByKey(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByKey", reflect.TypeOf((*MockService)(nil).FindByKey), arg0, arg1)
}

// Upload mocks base method.
func (m *MockService) Upload(arg0 context.Context, arg1 *v1.UploadObjectRequest) (*v1.UploadObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", arg0, arg1)
	ret0, _ := ret[0].(*v1.UploadObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upload indicates an expected call of Upload.
func (mr *MockServiceMockRecorder) Upload(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockService)(nil).Upload), arg0, arg1)
}

// mustEmbedUnimplementedObjectServiceServer mocks base method.
func (m *MockService) mustEmbedUnimplementedObjectServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedObjectServiceServer")
}

// mustEmbedUnimplementedObjectServiceServer indicates an expected call of mustEmbedUnimplementedObjectServiceServer.
func (mr *MockServiceMockRecorder) mustEmbedUnimplementedObjectServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedObjectServiceServer", reflect.TypeOf((*MockService)(nil).mustEmbedUnimplementedObjectServiceServer))
}
